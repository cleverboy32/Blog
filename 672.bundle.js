"use strict";(self.webpackChunkreact_wyz=self.webpackChunkreact_wyz||[]).push([[672],{2672:(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});const r='### 找出数组中和为 target 的两个数的 index\n\n```js\nfunction twoSum(array, target) {\n    const map = new Map();\n    for (let i = 0; i < array.length; i++) {\n        const rest = target - array[i];\n        if (map.has(rest)) {\n            return [map.get(rest), i];\n        }\n        map.set(array[i], i);\n    }\n    return [];\n}\n```\n\n###  使用promise+async await 实现一个函数，运行这个函数 先输出1 然后3s之后输出2\n\n\n```js\nfunction sleep (time) {\n\treturn new Promise((reslove) => {\n\t\tsetTimeout(() => { reslove() }, time)\n\t\t\n\t});\n}\n\n\nasync function  task () {\n\tconsole.log(1);\n\tawait sleep(3000);\n\tconsole.log(2);\n}\n```\n\n\n\n### 将两个递增数组合并成一个数组，且是递增的\n\n```js\nfunction mergeArray(array1, array2) {\n    const result = [];\n    let i = 0, j = 0;\n    while (i < array1.length && j < array2.length) {\n        result.push(array1[i] < array2[j] ? array1[i++] : array2[j++]);\n    }\n    return result.concat(array1.slice(i)).concat(array2.slice(j));\n}\n```\n\n### 如何用 lerna 管理 monorepo\n\n\n// ... existing code ...\n\n### 如何用 lerna 管理 monorepo\n\nLerna 是一个用于管理包含多个包（packages）的 JavaScript 项目的工具。以下是使用 Lerna 管理 monorepo 的基本步骤：\n\n1. **初始化 Lerna 项目**\n\n```bash\n# 安装 lerna\nnpm install --global lerna\n\n# 创建新的 lerna 项目\nmkdir my-lerna-repo && cd my-lerna-repo\nlerna init\n```\n\n2. **项目结构**\n\n```\nmy-lerna-repo/\n  packages/\n    package-1/\n      package.json\n    package-2/\n      package.json\n  package.json\n  lerna.json\n```\n\n3. **配置 lerna.json**\n\n```json\n{\n  "version": "1.0.0",\n  "npmClient": "npm",\n  "command": {\n    "publish": {\n      "ignoreChanges": ["ignored-file", "*.md"],\n      "message": "chore(release): publish"\n    },\n    "bootstrap": {\n      "ignore": "component-*",\n      "npmClientArgs": ["--no-package-lock"]\n    }\n  },\n  "packages": ["packages/*"]\n}\n```\n\n4. **常用命令**\n\n```bash\n# 安装所有依赖\nlerna bootstrap\n\n# 创建新包\nlerna create package-name\n\n# 为所有包添加依赖\nlerna add module-1 --scope=module-2\n\n# 发布包\nlerna publish\n\n# 执行每个包中的脚本\nlerna run test\n```\n\n5. **工作流程最佳实践**\n\n- 使用 `lerna bootstrap` 安装依赖\n- 使用 `lerna clean` 清理依赖\n- 使用 `lerna changed` 查看修改的包\n- 使用 `lerna diff` 查看具体改动\n- 使用 `lerna version` 更新版本号\n- 使用 `lerna publish` 发布包\n\n6. **版本控制策略**\n\n- Fixed/Locked mode (默认): 所有包使用同一版本号\n- Independent mode: 每个包独立版本号管理\n\n```bash\n# 使用独立版本模式初始化\nlerna init --independent\n```\n\n\n7. **使用 workspace 协议引用本地包**\n\n```json\n{\n  "dependencies": {\n    "@my-scope/package-1": "workspace:*"\n  }\n}\n```\n\n8. 引用本地包时，不打包引用的本地包\n\nwebpack 配置\n\n``` js\nexternals: [\n  // 方法1：使用正则匹配所有本地包\n  /^@my-scope\\/.+$/,\n]\n```\n\npackage.json 添加前置依赖包\n\n```json\n"peerDependencies": {\n  // 将本地包声明为 peerDependencies\n  "@my-scope/package-1": ""\n}\n```\n\n\n9. 组件库的整体打包和单组件模块打包配置\n\nwebpack 配置整体入口和单组件入口\n\n```js\n\n// 整体入口\nentry: {\n  index: \'./src/index.js\'\n}\n\n// 单组件入口\nentry: [\n  Button: \'./src/Button/index.js\',\n  Input: \'./src/Input/index.js\',\n  Select: \'./src/Select/index.js\',\n  ...\n]\n\n```\n\n\n### 实现一个 deepClone\n\n```js\nfunction deepClone(obj) {\n  if (typeof obj !== \'object\' || obj === null) return obj;\n  const newObj = Array.isArray(obj) ? [] : {};\n  for (const key in obj) {\n\n    console.log(key, obj[key])\n    newObj[key] = deepClone(obj[key]);\n  }\n  return newObj;\n}\n```\n\n\n### 实现一个封装的 useRequest 请求库\n\n\n```js\n\nclass HttpError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n  }\n}\n\n\n\nclass RequestClient {\n  constructor(defaultConfig = {}) {\n    this.defaultConfig = {\n      timeout: 10000,\n      retryTimes: 3,\n      ...defaultConfig\n    };\n  }\n\n  async request(params) {\n    const config = { ...this.defaultConfig, ...params };\n    const { url, method = \'GET\', headers = {}, timeout, retryTimes } = config;\n\n    const executeRequest = async (attempt = 0) => {\n      try {\n        const controller = new AbortController();  // 创建一个 AbortController 实例\n        const timeoutId = setTimeout(() => controller.abort(), timeout); // 设置超时\n\n        const response = await fetch(url, {\n          method,\n          headers,\n          signal: controller.signal, // 将 AbortController 的 signal 传递给 fetch  \n          ...config\n        });\n\n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          throw new HttpError(`HTTP Error: ${response.statusText}`, response.status);\n        }\n\n        const data = await response.json(); // 解析响应数据\n        return {\n          data,\n          status: response.status\n        };\n\n      } catch (error) {\n        if (attempt < retryTimes - 1) {\n          // Exponential backoff\n          await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n          return executeRequest(attempt + 1);\n        }\n        throw error;\n      }\n    };\n\n    return executeRequest();\n  }\n\n  // Convenience methods\n  get(url, config = {}) {\n    return this.request({ ...config, url, method: \'GET\' });\n  }\n\n  post(url, data, config = {}) {\n    return this.request({\n      ...config,\n      url,\n      method: \'POST\',\n      body: JSON.stringify(data)\n    });\n  }\n}\n\n// Hook implementation\nfunction useRequest(requestFn, options = {}) {\n  const {\n    manual = false,\n    defaultData = null,\n    onSuccess,\n    onError\n  } = options;\n\n  const [data, setData] = useState(defaultData);\n  const [loading, setLoading] = useState(!manual);\n  const [error, setError] = useState(null);\n\n  const run = async (...args) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await requestFn(...args);\n      setData(result.data);\n      onSuccess?.(result);\n      return result;\n    } catch (err) {\n      setError(err);\n      onError?.(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!manual) {\n      run();\n    }\n  }, []);\n\n  return {\n    data,\n    loading,\n    error,\n    run\n  };\n}\n\n// Usage example:\nconst client = new RequestClient({\n  timeout: 5000,\n  retryTimes: 3\n});\n\n// In component:\nconst { data, loading, error, run } = useRequest(\n  () => client.get(\'https://api.example.com/data\'),\n  {\n    manual: true,\n    onSuccess: (result) => console.log(\'Success:\', result),\n    onError: (error) => console.error(\'Error:\', error)\n  }\n);\n```\n'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,