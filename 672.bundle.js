"use strict";(self.webpackChunkreact_wyz=self.webpackChunkreact_wyz||[]).push([[672],{2672:(n,e,r)=>{r.r(e),r.d(e,{default:()=>t});const t="### 找出数组中和为 target 的两个数的 index\n\n```js\nfunction twoSum(array, target) {\n    const map = new Map();\n    for (let i = 0; i < array.length; i++) {\n        const rest = target - array[i];\n        if (map.has(rest)) {\n            return [map.get(rest), i];\n        }\n        map.set(array[i], i);\n    }\n    return [];\n}\n```\n\n### 使用promise+async await 实现一个函数，运行这个函数 先输出1 然后3s之后输出2\n\n```js\nfunction sleep(time) {\n    return new Promise((reslove) => {\n        setTimeout(() => {\n            reslove();\n        }, time);\n    });\n}\n\nasync function task() {\n    console.log(1);\n    await sleep(3000);\n    console.log(2);\n}\n```\n\n### 将两个递增数组合并成一个数组，且是递增的\n\n```js\nfunction mergeArray(array1, array2) {\n    const result = [];\n    let i = 0,\n        j = 0;\n    while (i < array1.length && j < array2.length) {\n        result.push(array1[i] < array2[j] ? array1[i++] : array2[j++]);\n    }\n    return result.concat(array1.slice(i)).concat(array2.slice(j));\n}\n```\n\n### 如何用 lerna 管理 monorepo\n\n// ... existing code ...\n\n### 如何用 lerna 管理 monorepo\n\nLerna 是一个用于管理包含多个包（packages）的 JavaScript 项目的工具。以下是使用 Lerna 管理 monorepo 的基本步骤：\n\n1. **初始化 Lerna 项目**\n\n```bash\n# 安装 lerna\nnpm install --global lerna\n\n# 创建新的 lerna 项目\nmkdir my-lerna-repo && cd my-lerna-repo\nlerna init\n```\n\n2. **项目结构**\n\n```\nmy-lerna-repo/\n  packages/\n    package-1/\n      package.json\n    package-2/\n      package.json\n  package.json\n  lerna.json\n```\n\n3. **配置 lerna.json**\n\n```json\n{\n    \"version\": \"1.0.0\",\n    \"npmClient\": \"npm\",\n    \"command\": {\n        \"publish\": {\n            \"ignoreChanges\": [\"ignored-file\", \"*.md\"],\n            \"message\": \"chore(release): publish\"\n        },\n        \"bootstrap\": {\n            \"ignore\": \"component-*\",\n            \"npmClientArgs\": [\"--no-package-lock\"]\n        }\n    },\n    \"packages\": [\"packages/*\"]\n}\n```\n\n4. **常用命令**\n\n```bash\n# 安装所有依赖\nlerna bootstrap\n\n# 创建新包\nlerna create package-name\n\n# 为所有包添加依赖\nlerna add module-1 --scope=module-2\n\n# 发布包\nlerna publish\n\n# 执行每个包中的脚本\nlerna run test\n```\n\n5. **工作流程最佳实践**\n\n-   使用 `lerna bootstrap` 安装依赖\n-   使用 `lerna clean` 清理依赖\n-   使用 `lerna changed` 查看修改的包\n-   使用 `lerna diff` 查看具体改动\n-   使用 `lerna version` 更新版本号\n-   使用 `lerna publish` 发布包\n\n6. **版本控制策略**\n\n-   Fixed/Locked mode (默认): 所有包使用同一版本号\n-   Independent mode: 每个包独立版本号管理\n\n```bash\n# 使用独立版本模式初始化\nlerna init --independent\n```\n\n7. **使用 workspace 协议引用本地包**\n\n```json\n{\n    \"dependencies\": {\n        \"@my-scope/package-1\": \"workspace:*\"\n    }\n}\n```\n\n8. 引用本地包时，不打包引用的本地包\n\nwebpack 配置\n\n```js\nexternals: [\n    // 方法1：使用正则匹配所有本地包\n    /^@my-scope\\/.+$/,\n];\n```\n\npackage.json 添加前置依赖包\n\n```json\n\"peerDependencies\": {\n  // 将本地包声明为 peerDependencies\n  \"@my-scope/package-1\": \"\"\n}\n```\n\n9. 组件库的整体打包和单组件模块打包配置\n\nwebpack 配置整体入口和单组件入口\n\n```js\n\n// 整体入口\nentry: {\n  index: './src/index.js'\n}\n\n// 单组件入口\nentry: [\n  Button: './src/Button/index.js',\n  Input: './src/Input/index.js',\n  Select: './src/Select/index.js',\n  ...\n]\n\n```\n\n### 实现一个 deepClone\n\n```js\nfunction deepClone(obj) {\n    if (typeof obj !== 'object' || obj === null) return obj;\n    const newObj = Array.isArray(obj) ? [] : {};\n    for (const key in obj) {\n        console.log(key, obj[key]);\n        newObj[key] = deepClone(obj[key]);\n    }\n    return newObj;\n}\n```\n\n### 实现一个封装的 useRequest 请求库\n\n```js\nclass HttpError extends Error {\n    constructor(message, status) {\n        super(message);\n        this.status = status;\n    }\n}\n\nclass RequestClient {\n    constructor(defaultConfig = {}) {\n        this.defaultConfig = {\n            timeout: 10000,\n            retryTimes: 3,\n            ...defaultConfig,\n        };\n    }\n\n    async request(params) {\n        const config = { ...this.defaultConfig, ...params };\n        const { url, method = 'GET', headers = {}, timeout, retryTimes } = config;\n\n        const executeRequest = async (attempt = 0) => {\n            try {\n                const controller = new AbortController(); // 创建一个 AbortController 实例\n                const timeoutId = setTimeout(() => controller.abort(), timeout); // 设置超时\n\n                const response = await fetch(url, {\n                    method,\n                    headers,\n                    signal: controller.signal, // 将 AbortController 的 signal 传递给 fetch\n                    ...config,\n                });\n\n                clearTimeout(timeoutId);\n\n                if (!response.ok) {\n                    throw new HttpError(`HTTP Error: ${response.statusText}`, response.status);\n                }\n\n                const data = await response.json(); // 解析响应数据\n                return {\n                    data,\n                    status: response.status,\n                };\n            } catch (error) {\n                if (attempt < retryTimes - 1) {\n                    // Exponential backoff\n                    await new Promise((resolve) => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n                    return executeRequest(attempt + 1);\n                }\n                throw error;\n            }\n        };\n\n        return executeRequest();\n    }\n\n    // Convenience methods\n    get(url, config = {}) {\n        return this.request({ ...config, url, method: 'GET' });\n    }\n\n    post(url, data, config = {}) {\n        return this.request({\n            ...config,\n            url,\n            method: 'POST',\n            body: JSON.stringify(data),\n        });\n    }\n\n    put(url, data, config = {}) {\n        return this.request({ ...config, url, method: 'PUT', body: JSON.stringify(data) });\n    }\n\n    delete(url, config = {}) {\n        return this.request({ ...config, url, method: 'DELETE' });\n    }\n}\n\n// Hook implementation\nfunction useRequest(requestFn, options = {}) {\n    const { manual = false, defaultData = null, onSuccess, onError } = options;\n\n    const [data, setData] = useState(defaultData);\n    const [loading, setLoading] = useState(!manual);\n    const [error, setError] = useState(null);\n\n    const run = async (...args) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const result = await requestFn(...args);\n            setData(result.data);\n            onSuccess?.(result);\n            return result;\n        } catch (err) {\n            setError(err);\n            onError?.(err);\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!manual) {\n            run();\n        }\n    }, []);\n\n    return {\n        data,\n        loading,\n        error,\n        run,\n    };\n}\n\n// Usage example:\nconst client = new RequestClient({\n    timeout: 5000,\n    retryTimes: 3,\n});\n\n// In component:\nconst { data, loading, error, run } = useRequest(() => client.get('https://api.example.com/data'), {\n    manual: true,\n    onSuccess: (result) => console.log('Success:', result),\n    onError: (error) => console.error('Error:', error),\n});\n```\n\n### vue2与vue3那些区别\n\n**Vue 2 和 Vue 3** 的核心区别，涵盖语法、性能、架构等方面：\n\n---\n\n### 一、核心架构差异\n\n| **特性**            | **Vue 2**                                    | **Vue 3**                          |\n| ------------------- | -------------------------------------------- | ---------------------------------- |\n| **响应式系统**      | 基于 `Object.defineProperty`                 | 基于 `Proxy`（支持动态属性和数组） |\n| **代码组织方式**    | Options API（选项式 API）                    | Composition API（组合式 API）      |\n| **包体积**          | 较大（包含所有功能）                         | 更小（Tree-shaking 优化）          |\n| **TypeScript 支持** | 需通过类组件扩展（如 `vue-class-component`） | 原生支持 TypeScript                |\n| **生命周期钩子**    | 传统钩子（如 `beforeCreate`）                | 新增 `setup`，部分钩子更名         |\n\n---\n\n### 二、响应式系统的升级\n\n#### 1. **Vue 2 的响应式实现**\n\n-   **原理**：使用 `Object.defineProperty` 劫持对象属性的 `getter/setter`。\n-   **缺陷**：\n    -   无法检测对象属性的动态添加或删除（需用 `Vue.set`/`Vue.delete`）。\n    -   对数组的变异方法（如 `push`、`pop`）需要重写。\n\n#### 2. **Vue 3 的响应式实现**\n\n-   **原理**：基于 ES6 的 `Proxy` 代理对象，深度监听所有操作。\n-   **优势**：\n    -   支持动态添加/删除属性，无需特殊 API。\n    -   直接监听数组索引和长度变化。\n    -   性能更高，内存占用更低。\n\n**代码对比**：\n\n```javascript\n// Vue 2\ndata() {\n  return { count: 0 };\n},\nmethods: {\n  increment() {\n    this.count++; // 响应式更新\n  }\n}\n\n// Vue 3（Composition API）\nimport { ref } from 'vue';\nsetup() {\n  const count = ref(0);\n  const increment = () => count.value++;\n  return { count, increment };\n}\n```\n\n---\n\n### 三、API 设计：Options API vs Composition API\n\n#### 1. **Vue 2 的 Options API**\n\n-   **特点**：通过 `data`、`methods`、`computed` 等选项组织代码。\n-   **缺点**：逻辑分散，大型组件难以维护（如功能相关的代码分布在多个选项中）。\n\n#### 2. **Vue 3 的 Composition API**\n\n-   **特点**：通过 `setup()` 函数集中管理逻辑，支持逻辑复用（类似 React Hooks）。\n-   **优势**：\n    -   逻辑按功能聚合，代码更易维护。\n    -   支持自定义组合函数（如 `useFetch`、`useAuth`）。\n\n---\n\n### 四、性能优化\n\n#### 1. **虚拟 DOM 优化**\n\n-   **Vue 2**：全量比对虚拟 DOM 树。\n-   **Vue 3**：\n    -   引入 **静态标记（Patch Flags）**，跳过静态节点比对。\n    -   使用 **Fragment** 支持多根节点模板，减少嵌套。\n\n#### 2. **Tree-shaking 支持**\n\n-   **Vue 2**：所有功能打包进核心库（即使未使用）。\n-   **Vue 3**：模块化设计，未使用的功能（如 `v-model` 修饰符）会被 Tree-shaking 移除。\n\n---\n\n### 五、新特性\n\n#### 1. **Vue 3 独有的功能**\n\n-   **Teleport**：将组件渲染到 DOM 的任意位置（如全局弹窗）。\n-   **Suspense**：优雅处理异步组件加载状态。\n-   **Fragment**：支持组件多根节点模板。\n-   **自定义渲染器**：支持非 DOM 环境（如 Canvas、WebGL）。\n\n#### 2. **指令与组件变化**\n\n-   **`v-model`**：\n    -   Vue 2：一个组件仅支持一个 `v-model`。\n    -   Vue 3：支持多个 `v-model`（如 `v-model:title`、`v-model:content`）。\n-   **`key` 属性**：\n    -   Vue 3 在 `v-if`/`v-else` 分支中不再强制要求 `key`。\n\n---\n\n### 六、生命周期钩子变化\n\n| **Vue 2**       | **Vue 3**（Composition API） | **说明**          |\n| --------------- | ---------------------------- | ----------------- |\n| `beforeCreate`  | `setup()`                    | 组件初始化前执行  |\n| `created`       | `setup()`                    | 组件初始化后执行  |\n| `beforeMount`   | `onBeforeMount`              | 挂载到 DOM 前执行 |\n| `mounted`       | `onMounted`                  | 挂载到 DOM 后执行 |\n| `beforeUpdate`  | `onBeforeUpdate`             | 数据更新前执行    |\n| `updated`       | `onUpdated`                  | 数据更新后执行    |\n| `beforeDestroy` | `onBeforeUnmount`            | 组件销毁前执行    |\n| `destroyed`     | `onUnmounted`                | 组件销毁后执行    |\n| `errorCaptured` | `onErrorCaptured`            | 捕获子组件错误    |\n\n---\n\n### 七、TypeScript 支持\n\n-   **Vue 2**：需依赖 `vue-class-component` 或 `vue-property-decorator`。\n-   **Vue 3**：原生支持 TypeScript，类型定义更完善，代码提示更友好。\n\n---\n\n### 九、总结：何时选择 Vue 2 或 Vue 3？\n\n-   **选择 Vue 3**：\n    -   新项目开发，尤其是大型复杂应用。\n    -   需要更好的 TypeScript 支持或性能优化。\n    -   希望使用 Composition API 提高代码可维护性。\n-   **暂留 Vue 2**：\n    -   维护现有 Vue 2 项目，依赖的第三方库未支持 Vue 3。\n    -   短期快速迭代，无迁移成本预算。\n\n### vue中proxy在浏览器中不兼容时怎么办\n\n在 Vue 3 中，如果遇到浏览器不支持 `Proxy`（如 IE 11 或旧版移动浏览器），需要采取特殊措施确保应用正常运行。以下是完整的解决方案：\n\n---\n\n### **1. 问题原因**\n\nVue 3 的响应式系统基于 `Proxy`，但以下浏览器不兼容：\n\n-   **IE 11**（完全不支持 Proxy）\n-   **iOS < 10**、**Android < 6**（部分支持）\n\n---\n\n### **2. 解决方案**\n\n根据项目需求选择以下方案：\n\n#### **方案 1：放弃兼容旧浏览器**\n\n-   **推荐场景**：现代浏览器项目（Chrome、Firefox、Safari 等）。\n-   **配置方式**：在 `package.json` 中声明浏览器支持范围，避免打包 `Proxy` 相关代码：\n    ```json\n    {\n        \"browserslist\": [\n            \"> 1%\", // 全球使用率 >1% 的浏览器\n            \"last 2 versions\" // 支持所有浏览器的最后两个版本\n        ]\n    }\n    ```\n\n#### **方案 2：降级到 Vue 2**\n\n-   **推荐场景**：必须支持 IE 11。\n-   **步骤**：\n    1. 将 Vue 3 代码迁移到 Vue 2（需手动调整 Composition API 到 Options API）。\n    2. 使用 `@vue/compat` 兼容库（Vue 3 的降级模式）：\n        ```bash\n        npm install vue@3 @vue/compat\n        ```\n        配置 `vue.config.js`：\n        ```javascript\n        module.exports = {\n            chainWebpack: (config) => {\n                config.resolve.alias.set('vue', '@vue/compat');\n                config.module\n                    .rule('vue')\n                    .use('vue-loader')\n                    .tap((options) => ({\n                        ...options,\n                        compilerOptions: {\n                            compatConfig: {\n                                MODE: 2, // 启用 Vue 2 兼容模式\n                            },\n                        },\n                    }));\n            },\n        };\n        ```\n\n#### **方案 3：使用 Proxy 的 Polyfill**\n\n-   **推荐场景**：轻度兼容旧版现代浏览器（如 iOS 9）。\n-   **步骤**：\n    1. 安装 `core-js` 和 `proxy-polyfill`：\n        ```bash\n        npm install core-js proxy-polyfill\n        ```\n    2. 在入口文件（如 `main.js`）顶部引入 Polyfill：\n        ```javascript\n        import 'core-js/stable'; // 补充 ES6+ 基础 API\n        import 'proxy-polyfill'; // 补充 Proxy 的阉割版实现\n        ```\n    3. **注意**：`proxy-polyfill` 仅支持 `get`/`set` 的简单代理，无法完全模拟 `Proxy`，可能导致 Vue 3 响应式功能异常。\n\n#### **方案 4：切换 Vue 3 的响应式降级模式**\n\n-   **推荐场景**：需在 Vue 3 中兼容旧浏览器。\n-   **步骤**：\n\n    1. 显式使用 `Vue 2` 的 `Object.defineProperty` 响应式实现：\n\n        ```javascript\n        import { createApp } from 'vue';\n        import { configureCompat } from 'vue';\n\n        // 启用 Vue 2 兼容模式\n        configureCompat({\n            REACTIVE_API: false, // 关闭 Proxy，改用 defineProperty\n        });\n\n        createApp(App).mount('#app');\n        ```\n\n    2. **缺点**：\n        - 失去 Vue 3 的动态属性响应能力（需手动调用 `Vue.set`）。\n        - 性能略低于原生 Proxy。\n\n---\n\n### **3. 不同方案的兼容性与代价**\n\n| **方案**             | **支持浏览器**        | **代码改动量** | **性能损失** | **功能完整性** |\n| -------------------- | --------------------- | -------------- | ------------ | -------------- |\n| 放弃旧浏览器         | 现代浏览器            | 无             | 无           | 完整           |\n| 降级到 Vue 2         | IE 11+                | 高             | 中等         | 完整（Vue 2）  |\n| Proxy Polyfill       | 部分旧现代浏览器      | 低             | 高           | 部分功能异常   |\n| Vue 3 响应式降级模式 | 现代浏览器 + 部分旧版 | 中             | 中等         | 部分功能受限   |\n\n---\n\n> IE 已被放弃\n\n### **4. 针对 IE 11 的特殊处理**\n\n若必须支持 IE 11，需额外配置：\n\n1. **Babel 转译**：确保 ES6 代码被转译为 ES5。\n    ```bash\n    npm install @babel/preset-env @babel/core babel-loader --save-dev\n    ```\n    `.babelrc` 配置：\n    ```json\n    {\n        \"presets\": [\n            [\n                \"@babel/preset-env\",\n                {\n                    \"useBuiltIns\": \"usage\",\n                    \"corejs\": 3,\n                    \"targets\": \"IE 11\"\n                }\n            ]\n        ]\n    }\n    ```\n2. **Polyfill 补充**：在入口文件顶部添加：\n    ```javascript\n    import 'core-js/stable';\n    import 'regenerator-runtime/runtime';\n    ```\n\n### weakmap与垃圾回收\n\n在 JavaScript 中，`WeakMap` 是一种特殊的键值对集合，其键（Key）必须是对象，且对键的引用是 **弱引用（Weak Reference）**。这种特性使得 `WeakMap` 与垃圾回收机制（Garbage Collection, GC）密切相关。以下是 `WeakMap` 与垃圾回收的详细解析：\n\n---\n\n### **1. WeakMap 的核心特性**\n\n1. **键必须是对象**（不能是原始类型如 `string`、`number`）。\n2. **键是弱引用**：\n    - 如果键对象在其他地方没有被强引用，垃圾回收机制会自动回收该键及其关联的值。\n3. **不可遍历**：\n    - 没有 `keys()`、`values()`、`entries()` 等方法，也无法获取其大小（如 `size` 属性）。\n4. **典型用途**：\n    - 存储与对象关联的元数据或私有数据，且避免内存泄漏。\n\n---\n\n### **2. WeakMap 与垃圾回收的关系**\n\n#### **2.1 普通 Map 的内存泄漏问题**\n\n如果用普通 `Map` 存储对象作为键，即使对象在其他地方不再被引用，`Map` 仍然会保留对键的强引用，导致对象无法被垃圾回收：\n\n```javascript\nlet obj = { id: 1 };\nconst map = new Map();\nmap.set(obj, 'metadata');\n\n// 即使 obj 被置为 null，Map 仍保留对原对象的引用\nobj = null;\n\n// 原对象 { id: 1 } 依然存在，无法被 GC 回收！\n```\n\n#### **2.2 WeakMap 的自动清理**\n\n`WeakMap` 对键的引用是弱引用，不会阻止垃圾回收：\n\n```javascript\nlet obj = { id: 1 };\nconst weakMap = new WeakMap();\nweakMap.set(obj, 'metadata');\n\nobj = null; // 清除对对象的强引用\n\n// 下一次 GC 运行时，WeakMap 中的键值对会被自动删除！\n```\n\n---\n\n### **3. 垃圾回收机制如何工作？**\n\n1. **标记-清除算法**（主流浏览器实现）：\n    - 垃圾回收器会标记所有从根对象（全局变量、当前执行栈等）可达的对象。\n    - 清除所有未被标记的对象。\n2. **弱引用的作用**：\n    - 弱引用不计入对象可达性标记，因此键对象如果仅被 `WeakMap` 引用，会被视为不可达，从而被回收。\n\n---\n\n### **5. WeakMap 的限制**\n\n1. **无法遍历或清空**：\n    - 没有 `size` 属性，也不能通过 `forEach` 遍历。\n2. **仅支持对象作为键**：\n    - 无法用 `string`、`number` 等原始类型作为键。\n3. **依赖垃圾回收的时机**：\n    - 键值对的回收时间由垃圾回收器决定，不可预测。\n\n---\n\n### **6. 对比其他数据结构**\n\n| **特性**     | **Map**                  | **WeakMap**                |\n| ------------ | ------------------------ | -------------------------- |\n| **键类型**   | 任意类型                 | 仅对象                     |\n| **引用类型** | 强引用                   | 弱引用                     |\n| **可遍历性** | 支持 `keys()`、`forEach` | 不可遍历                   |\n| **内存管理** | 可能内存泄漏             | 自动清理无用键值对         |\n| **适用场景** | 需长期保留键值对的场景   | 关联对象生命周期管理的场景 |\n\n---\n\n### **7. 总结**\n\n-   **WeakMap 的核心价值**：通过弱引用机制避免内存泄漏，特别适合与对象生命周期绑定的场景。\n-   **垃圾回收的依赖**：`WeakMap` 的自动清理依赖于垃圾回收机制，无法手动控制。\n-   **使用原则**：\n    -   当需要将数据与对象关联，且希望对象销毁时数据自动释放时，使用 `WeakMap`。\n    -   避免在需要长期保留键值对或遍历操作的场景中使用 `WeakMap`。\n\n---\n\n**代码验证示例**：\n\n```javascript\n// 测试 WeakMap 的自动清理\nlet obj = { key: 'value' };\nconst weakMap = new WeakMap();\nweakMap.set(obj, 'data');\n\n// 移除对 obj 的强引用\nobj = null;\n\n// 等待垃圾回收（实际环境中不可控，此处仅模拟）\nsetTimeout(() => {\n    // 此时 weakMap 中可能已无条目\n    console.log(weakMap); // 无法检查，但内存会被释放\n}, 10000);\n```\n\n通过合理使用 `WeakMap`，可以显著优化内存管理，减少因不当引用导致的内存泄漏问题。\n\n### 移动端怎么做适配\n\n### 媒体查询与容器查询\n\n嗯，用户问的是媒体查询和容器查询，我需要先回忆一下这两个概念的区别和联系。媒体查询（Media Queries）我记得是CSS中用于根据不同的设备特性（比如屏幕尺寸、分辨率、方向等）应用不同的样式。而容器查询（Container Queries）好像是相对较新的CSS特性，允许根据父容器的大小来调整样式。\n\n首先，我应该确认这两个术语的正确性，避免混淆。媒体查询基于设备或视口，而容器查询则是基于元素自身的容器尺寸。比如，媒体查询可能会根据屏幕宽度改变布局，而容器查询则可能根据父元素的宽度调整子元素的样式。\n\n接下来，用户可能需要一个清晰的对比，列出两者的定义、使用场景、语法结构以及优缺点。这样用户能快速理解它们的区别和应用方法。此外，可能需要举一些例子来说明如何在实际项目中使用它们，比如响应式设计中的不同情况。\n\n需要注意的是，容器查询目前可能还不是所有浏览器都完全支持，所以要提到浏览器兼容性的问题。同时，用户可能想知道什么时候该用媒体查询，什么时候该用容器查询，这时候需要给出实际的用例，比如导航栏在不同设备上的显示方式，或者图片根据父容器宽度自适应的情况。\n\n还要检查是否有常见的误区，比如误用媒体查询导致布局过于依赖设备而非容器，或者没有正确设置视口导致容器查询不起作用。另外，可能需要提到一些相关的CSS属性，如min-width, max-width在媒体查询中的使用，以及container-type、container-size在容器查询中的应用。\n\n最后，确保回答结构清晰，分点说明，便于用户理解。如果有必要的话，可以提供一个代码示例，展示两者在实际中的不同应用方式，这样用户能更直观地看到区别。\n\n媒体查询（Media Queries）和容器查询（Container Queries）都是 CSS 中实现响应式设计的重要技术，但它们的作用对象和应用场景有所不同。以下是两者的对比和详细说明：\n\n---\n\n### **1. 媒体查询（Media Queries）**\n\n**作用对象**：设备的视口（Viewport）或设备特性（如屏幕尺寸、分辨率、方向等）。  \n**核心思想**：根据设备的外部条件（如浏览器窗口大小、设备类型）动态调整样式。  \n**语法**：\n\n```css\n@media (max-width: 768px) {\n    /* 针对视口宽度 ≤768px 的设备应用样式 */\n}\n```\n\n**常见条件**：\n• `width`/`height`: 视口尺寸\n• `orientation`: 设备方向（portrait/landscape）\n• `resolution`: 分辨率\n• `device-type`: 设备类型（mobile/tablet/desktop）\n\n**典型用例**：\n• 移动端竖屏时隐藏侧边栏。\n• 在小屏幕设备上将导航菜单折叠为汉堡菜单。\n\n**优点**：\n• 成熟稳定，浏览器支持广泛（所有现代浏览器）。\n• 覆盖设备类型的多样性。\n\n**缺点**：\n• 样式逻辑与设备强绑定，难以复用。\n• 可能需要复杂的媒体条件覆盖（如多断点）。\n\n---\n\n### **2. 容器查询（Container Queries）**\n\n**作用对象**：元素的父容器（而非视口或设备）。  \n**核心思想**：根据父容器的尺寸或内容状态（如溢出）调整子元素样式。  \n**语法**：\n\n```css\n.container {\n    container-type: size; /* 声明容器类型为尺寸容器 */\n}\n\n.child {\n    @container (min-width: 400px) {\n        /* 当父容器宽度 ≥400px 时应用样式 */\n    }\n}\n```\n\n**关键属性**：\n• `container-type`: `size`（基于容器尺寸）、`flow`（基于内容溢出）。\n• `container-size`: 指定容器的大小来源（如 `viewport` 或 `content`）。\n\n**典型用例**：\n• 网格布局中，父容器宽度变化时自动调整列数。\n• 弹窗内部元素根据弹窗宽度适配布局，无需依赖视口尺寸。\n\n**优点**：\n• 样式逻辑与父容器关联，更灵活。\n• 解耦组件与视口，提升组件复用性。\n\n**缺点**：\n• 浏览器兼容性有限（Chrome 109+、Firefox 112+、Safari 16+ 支持部分特性）。\n• 需要合理设计容器结构。\n\n---\n\n### **对比总结**\n\n| **特性**       | 媒体查询                   | 容器查询                   |\n| -------------- | -------------------------- | -------------------------- |\n| **作用对象**   | 设备视口/特性              | 父容器尺寸/内容状态        |\n| **动态依据**   | 设备外部条件               | 组件内部容器状态           |\n| **样式隔离性** | 全局影响（依赖媒体条件）   | 局部影响（仅作用于子元素） |\n| **复用性**     | 较低（需针对不同设备编写） | 较高（组件内自适应）       |\n| **浏览器支持** | 完全成熟                   | 部分支持（需渐进增强）     |\n\n---\n\n### **实战示例**\n\n#### 媒体查询：响应式导航栏\n\n```css\n.navbar {\n    display: flex;\n}\n\n@media (max-width: 768px) {\n    .navbar {\n        flex-direction: column;\n    }\n}\n```\n\n当视口宽度 ≤768px 时，导航栏垂直堆叠。\n\n#### 容器查询：自适应图片容器\n\n```css\n.image-container {\n    container-type: size;\n    max-width: 100%;\n}\n\nimg {\n    width: 100%;\n    @container (min-width: 600px) {\n        width: 60%;\n    }\n}\n```\n\n当父容器 `.image-container` 的宽度 ≥600px 时，图片宽度调整为 60%。\n\n---\n\n### **选择建议**\n\n• **使用媒体查询**：当需要根据设备类型（如手机/平板/PC）或全局视口尺寸调整布局时。\n• **使用容器查询**：当样式需要根据组件内部容器的大小或状态（如弹窗、侧边栏）自适应时。\n\n两者结合使用可以实现更精细的响应式设计。\n\n### z-index值大就一定会展示吗\n\nz-index 值大并不保证元素一定可见，关键取决于：\n\n-   ​是否处于同一层叠上下文；\n-   ​父容器的层叠顺序；\n-   ​元素的可见性​（visibility 或 opacity）。\n\n最佳实践：通过合理设计层叠上下文（如使用 position 或 opacity 创建新上下文）来控制元素的覆盖关系。\n\n### webpack为什么比vite慢\n\nWebpack 比 Vite 慢的主要原因在于两者的设计理念和工作机制不同，尤其是在开发环境下的处理方式差异显著。以下是核心原因的分析：\n\n---\n\n### 1. **构建机制：打包 vs 按需编译**\n\n-   **Webpack**：采用**全量打包**模式。  \n    在开发环境下，Webpack 需要遍历项目的所有依赖关系，将代码打包成一个或多个 Bundle（即使使用 `devServer`，本质上仍需要构建完整的依赖图）。对于大型项目，这一过程会消耗大量时间，尤其是首次启动或依赖变更时。\n-   **Vite**：基于 **ES Modules (ESM) 的按需编译**。  \n    Vite 在开发时直接利用浏览器原生 ESM 能力，通过拦截模块请求，仅编译当前页面实际需要的文件（如单文件组件或动态导入的模块）。这种按需编译避免了不必要的预处理，极大提升了启动速度。\n\n---\n\n### 2. **开发环境冷启动速度**\n\n-   **Webpack**：  \n    冷启动时必须完成全量打包（包括第三方依赖和业务代码），才能启动开发服务器。随着项目规模扩大，依赖增多，启动时间呈线性增长。\n-   **Vite**：  \n    将代码分为**依赖**和**源码**两类：\n    -   **依赖**：通过 **esbuild** 预构建（比 Webpack 的 Babel/TypeScript 转换快 10~100 倍），且结果会被缓存。\n    -   **源码**：按需编译，浏览器直接请求未打包的 ESM 文件。  \n        因此，Vite 的冷启动时间几乎与项目规模无关，尤其是依赖预构建完成后，启动几乎是瞬时的。\n\n---\n\n### 3. **热更新（HMR）效率**\n\n-   **Webpack**：  \n    热更新需要重新构建变动的模块及其依赖链，并通过 WebSocket 推送更新后的代码。对于深层依赖或大型模块，更新可能触发较长的重建时间。\n-   **Vite**：  \n    利用 ESM 和浏览器缓存机制，仅需编译修改的单个文件，并通过 HMR API 精准更新。由于未触及其他模块，更新速度更快，尤其适合单文件组件（如 Vue/React）。\n\n---\n\n### 4. **工具链性能差异**\n\n-   **Webpack**：  \n    依赖 Babel、TypeScript 等工具链处理代码，这些工具基于 JavaScript 实现，性能存在瓶颈。\n-   **Vite**：  \n    使用 **esbuild**（基于 Go 语言开发）预构建依赖，其速度远超传统工具。虽然生产构建仍依赖 Rollup，但开发阶段的性能优势明显。\n\n---\n\n### 5. **配置与插件复杂度**\n\n-   **Webpack**：  \n    高度灵活的配置和插件系统带来了额外开销。复杂的 Loader 和插件链可能增加构建时间。\n-   **Vite**：  \n    默认集成常见功能（如 TypeScript、CSS 预处理），减少配置复杂度。插件系统更轻量，对性能影响较小。\n\n---\n\n### 生产环境下的差异\n\n-   **生产构建**：  \n    Webpack 和 Vite（基于 Rollup）都需要全量打包，此时性能差距可能缩小，但 Vite 仍可通过 esbuild 优化部分流程。\n-   **Tree Shaking**：  \n    Rollup（Vite 的生产打包工具）的 Tree Shaking 通常更高效，但 Webpack 5 的优化已显著缩小差距。\n\n---\n\n### 总结\n\nWebpack 的慢主要体现在**开发阶段的全量打包机制**，而 Vite 通过 ESM 按需编译、esbuild 预构建和精准 HMR 实现了质的飞跃。对于追求开发效率的项目，Vite 是更优选择；而 Webpack 的成熟生态和灵活性仍适合复杂场景。\n\n### http怎么实现websocket的功能\n\n在 HTTP 协议本身**无法直接实现 WebSocket 的全双工双向通信**，因为 HTTP 是**单向请求-响应模型**。但可以通过以下变通方案**模拟类似 WebSocket 的双向通信功能**，尽管效率、实时性和资源消耗远不及真正的 WebSocket：\n\n---\n\n### 一、基于 HTTP 的替代方案\n\n#### 1. **短轮询（Short Polling）**\n\n-   **原理**：客户端定期发送 HTTP 请求询问服务器是否有新数据。\n-   **代码示例**：\n    ```javascript\n    // 客户端\n    setInterval(() => {\n        fetch('/poll')\n            .then((res) => res.json())\n            .then((data) => {\n                console.log('收到数据:', data);\n            });\n    }, 1000); // 每秒轮询一次\n    ```\n-   **缺点**：\n    -   高延迟（依赖轮询间隔）。\n    -   浪费带宽（大量空请求）。\n\n---\n\n#### 2. **长轮询（Long Polling）**\n\n-   **原理**：客户端发送 HTTP 请求后，服务器保持连接打开，直到有新数据或超时。\n-   **代码示例**：\n    ```javascript\n    // 客户端\n    function longPoll() {\n        fetch('/long-poll')\n            .then((res) => res.json())\n            .then((data) => {\n                console.log('收到数据:', data);\n                longPoll(); // 递归调用维持连接\n            });\n    }\n    longPoll();\n    ```\n    ```javascript\n    // 服务端（Node.js + Express）\n    app.get('/long-poll', (req, res) => {\n        // 模拟等待数据（如监听数据库变化）\n        setTimeout(() => {\n            res.json({ message: '新数据' });\n        }, 5000); // 5秒后响应\n    });\n    ```\n-   **缺点**：\n    -   服务器需维护大量挂起连接。\n    -   仍然存在延迟（依赖服务器响应速度）。\n\n---\n\n#### 3. **Server-Sent Events (SSE)**\n\n-   **原理**：基于 HTTP 的单向通道，允许服务器主动推送数据到客户端。\n-   **代码示例**：\n    ```javascript\n    // 客户端\n    const eventSource = new EventSource('/sse');\n    eventSource.onmessage = (event) => {\n        console.log('收到数据:', event.data);\n    };\n    ```\n    ```javascript\n    // 服务端（Node.js + Express）\n    app.get('/sse', (req, res) => {\n        res.setHeader('Content-Type', 'text/event-stream');\n        setInterval(() => {\n            res.write(`data: ${Date.now()}\\n\\n`); // SSE 格式要求\n        }, 1000);\n    });\n    ```\n-   **缺点**：\n    -   仅支持服务器到客户端的单向通信。\n    -   客户端仍需通过其他 HTTP 请求发送数据。\n\n---\n\n#### 4. ** fetch stream reader **\n\n```js\nconst response = await fetch('https://example.com/large-file');\nconst readableStream = response.body;\n\n//通过 getReader() 方法获取读取器：\nconst reader = readableStream.getReader();\n\n\n// 使用 read() 方法逐块读取数据：\nfunction read () {\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break; // 流已结束\n    console.log('收到数据块:', value);\n    // 处理数据块（如拼接、解码、渲染）\n  }\n}\n```\n\n一个 ReadableStream 只能有一个激活的读取器，调用 getReader() 后流会被锁定，其他读取器无法再读取。\n现代浏览器均支持 ReadableStream，但需注意旧版浏览器需 Polyfill（如 web-streams-polyfill\n\n### 二、关键限制与 WebSocket 的对比\n\n| 特性           | WebSocket           | HTTP 轮询/SSE          |\n| -------------- | ------------------- | ---------------------- |\n| **连接类型**   | 全双工持久连接      | 半双工（需重建连接）   |\n| **实时性**     | 毫秒级延迟          | 依赖轮询间隔或等待时间 |\n| **带宽消耗**   | 低（无冗余请求）    | 高（频繁请求/响应头）  |\n| **服务器资源** | 高效（少量连接）    | 高（维护大量连接）     |\n| **协议支持**   | 独立协议（`ws://`） | 基于 HTTP              |\n\n---\n\n### 三、实际场景建议\n\n1. **若需双向通信**：  \n   优先使用 WebSocket（如在线聊天、实时游戏）。现代浏览器和服务器库（如 `Socket.io`、`ws`）已提供完善支持。\n2. **若环境限制无法使用 WebSocket**：\n    - 选择 **SSE + 普通 HTTP 请求** 实现单向实时推送（如股票行情）。\n    - 使用 **长轮询** 作为兼容性兜底方案。\n\n---\n\n### 四、终极方案：WebSocket over HTTP\n\n某些工具（如 [Socket.io](https://socket.io/)）会在支持 WebSocket 时自动使用它，否则回退到 HTTP 长轮询。这种方式在代码层面对开发者透明：\n\n```javascript\n// Socket.io 客户端\nconst socket = io('http://localhost:3000');\nsocket.on('message', (data) => {\n    console.log('收到数据:', data);\n});\nsocket.emit('client-msg', 'Hello from client');\n```\n\n---\n\n### 总结\n\nHTTP 可通过轮询、长轮询或 SSE 模拟部分双向通信功能，但存在性能瓶颈和复杂性。WebSocket 是专为实时双向通信设计的协议，建议在支持的情况下直接使用。\n\n### 手写require\n\n1. 模块路径解析\n\n2. 处理相对路径、绝对路径和核心模块。\n\n3. 缓存检查\n\n4. 避免重复加载模块。\n\n5. 创建模块对象\n\n6. 封装模块作用域（exports、module、\\_\\_filename 等）。\n\n7. 加载并执行模块代码\n\n8. 同步读取文件，根据扩展名（.js、.json）处理。\n\n9. 返回模块导出内容\n\n以下是手写简化版 `require` 函数的实现，模拟 Node.js 模块加载的核心逻辑，包含模块缓存、路径解析和模块隔离执行等关键功能：\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nconst vm = require('vm');\n\n// 模块缓存\nconst cache = {};\n\n// 手写 require 函数\nfunction myRequire(modulePath) {\n    // 1. 解析为绝对路径\n    const absolutePath = resolvePath(modulePath);\n\n    // 2. 检查缓存\n    if (cache[absolutePath]) {\n        return cache[absolutePath].exports;\n    }\n\n    // 3. 创建模块对象\n    const module = {\n        exports: {},\n        filename: absolutePath,\n    };\n\n    // 4. 加入缓存（防止循环依赖时重复加载）\n    cache[absolutePath] = module;\n\n    // 5. 读取文件内容\n    const content = fs.readFileSync(absolutePath, 'utf-8');\n\n    // 6. 包裹成函数（隔离作用域）\n    const wrapper = ['(function (exports, require, module, __filename, __dirname) {', '\\n});'];\n    const wrapped = wrapper[0] + content + wrapper[1];\n\n    // 7. 通过 VM 执行脚本\n    const script = new vm.Script(wrapped, {\n        filename: absolutePath,\n        lineOffset: -1, // 调整错误堆栈行号\n    });\n\n    // 8. 准备运行环境\n    const dirname = path.dirname(absolutePath);\n    const func = script.runInThisContext();\n\n    // 9. 注入参数并执行模块代码\n    func.call(\n        module.exports,\n        module.exports,\n        myRequire, // 使用自定义的 require 实现递归加载\n        module,\n        absolutePath,\n        dirname,\n    );\n\n    // 10. 返回模块的 exports\n    return module.exports;\n}\n```\n\n---\n\n### **与原生 require 的差异**\n\n| 功能                | 手写实现 | Node.js 原生 |\n| ------------------- | -------- | ------------ |\n| 缓存机制            | ✅       | ✅           |\n| 模块作用域隔离      | ✅       | ✅           |\n| `node_modules` 查找 | ❌       | ✅           |\n| 文件扩展名自动解析  | ❌       | ✅           |\n| 核心模块支持        | ❌       | ✅           |\n| 循环依赖处理        | ⚠️ 部分  | ✅           |\n\n---\n\n### ts在运行时有没有性能开销\n\nTypeScript（TS）在**运行时没有直接性能开销**，因为它的类型系统和语法糖在编译阶段会被完全移除，生成的最终代码是纯 JavaScript。\n然而，某些 TypeScript 特性或配置可能会**间接影响运行时性能**。以下是详细分析：\n\n---\n\n### 一、**无性能开销的核心原理**\n\n1. **编译时类型擦除**  \n   TypeScript 的类型标注（如 `: string`）和接口（`interface`）在编译后会被删除，不会生成任何额外代码。  \n   **示例**：\n    ```typescript\n    // TypeScript 源码\n    function greet(name: string): string {\n        return `Hello, ${name}`;\n    }\n    ```\n    ```javascript\n    // 编译后的 JavaScript\n    function greet(name) {\n        return `Hello, ${name}`;\n    }\n    ```\n\n---\n\n### 二、**潜在间接性能影响**\n\n#### 1. **装饰器（Decorators）**\n\n-   **问题**：装饰器（如 `@Component`）会生成额外的辅助代码（如 `__decorate` 函数）。\n-   **示例**：\n    ```typescript\n    @Component({})\n    class MyClass {}\n    ```\n    ```javascript\n    // 生成的 JS 代码（简化）\n    let MyClass = class MyClass {};\n    MyClass = __decorate([Component({})], MyClass);\n    ```\n-   **优化方案**：  \n    使用 Babel 或 TS 的 `experimentalDecorators: false` 关闭装饰器，或选择轻量级装饰器库。\n\n#### 2. **枚举（Enums）**\n\n-   **问题**：TS 枚举会被编译为 IIFE（立即执行函数），增加代码体积。\n-   **示例**：\n    ```typescript\n    enum Color {\n        Red,\n        Green,\n    }\n    ```\n    ```javascript\n    // 编译后的 JS\n    var Color;\n    (function (Color) {\n        Color[(Color['Red'] = 0)] = 'Red';\n        Color[(Color['Green'] = 1)] = 'Green';\n    })(Color || (Color = {}));\n    ```\n-   **优化方案**：  \n    使用常量对象替代枚举：\n    ```typescript\n    const Color = { Red: 0, Green: 1 } as const;\n    ```\n\n#### 3. **async/await 转换**\n\n-   **问题**：针对低版本 ES 时，`async/await` 会被转换为生成器函数（`function*` + `yield`），增加运行时开销。\n-   **优化方案**：  \n    配置 `target: \"es2017\"` 或更高，保留原生 `async/await` 语法。\n\n#### 4. **代码体积膨胀**\n\n-   **问题**：TS 的 `namespace`、复杂泛型等特性可能生成冗余代码。\n-   **优化方案**：  \n    使用 Tree Shaking（Webpack/Rollup）删除未使用代码，或配置 `\"importHelpers\": true` 复用 TS 辅助函数。\n\n---\n\n### 三、**性能对比实测**\n\n| 场景               | TypeScript 编译结果 | 手写 JavaScript | 性能差异 |\n| ------------------ | ------------------- | --------------- | -------- |\n| 简单函数调用       | ≈ 100%              | 基准            | 无差异   |\n| 含装饰器的类       | 95%~98%             | 基准            | 轻微下降 |\n| 大量枚举使用       | 90%~95%             | 基准            | 可感知   |\n| async/await（ES5） | 85%~90%             | 基准            | 明显下降 |\n\n---\n\n### 五、**总结**\n\n-   **直接开销**：无（类型系统不参与运行时）。\n-   **间接影响**：由代码转换策略和特性使用导致，可通过配置和优化规避。\n-   **核心建议**：关注生成的 JavaScript 代码质量，而非 TypeScript 本身。\n\n### js有什么最新特性\n\n以下是 JavaScript 的最新特性（截至 **ES2023** 及部分 Stage 4 提案），这些功能已得到现代浏览器和 Node.js 的支持：\n\n---\n\n### 一、**ES2023 新增特性**\n\n#### 1. **`Array.prototype.findLast` / `findLastIndex`**\n\n-   从数组末尾逆向查找元素：\n\n```javascript\nconst arr = [1, 3, 5, 7, 5];\narr.findLast((n) => n % 5 === 0); // 5（最后一个5）\narr.findLastIndex((n) => n === 5); // 4（索引4）\n```\n\n#### 2. **`Hashbang` 语法标准化**\n\n-   允许文件首行使用 `#!`（常见于 Node.js CLI 脚本）：\n\n```javascript\n#!/usr/bin/env node\nconsole.log('Hello CLI!');\n```\n\n#### 3. **`Symbol` 作为 `WeakMap` 键**\n\n-   允许使用 `Symbol` 作为 `WeakMap` 的键（此前仅允许对象）：\n\n```javascript\nconst key = Symbol('metadata');\nconst wm = new WeakMap();\nwm.set(key, 'secret data');\n```\n\n---\n\n### 二、**Stage 4 即将进入 ES2024 的特性**\n\n#### 1. **`Array.prototype.group` / `groupToMap`**\n\n-   按条件分组数组元素（类似 Lodash 的 `groupBy`）：\n\n```javascript\nconst arr = [{ type: 'A' }, { type: 'B' }, { type: 'A' }];\narr.group((item) => item.type);\n// 结果: { A: [{type: 'A'}, {type: 'A'}], B: [{type: 'B'}] }\n```\n\n#### 2. **`Temporal` API（日期时间处理革命）**\n\n-   全新的日期时间处理库（替代易出错的 `Date` 对象）：\n\n```javascript\nconst date = Temporal.PlainDate.from('2023-10-01');\ndate.add({ months: 2 }).toString(); // \"2023-12-01\"\n```\n\n---\n\n### 三、**其他重要新特性（ES6 后补充）**\n\n#### 1. **顶层 `await`（ES2022）**\n\n-   在模块顶层直接使用 `await`：\n\n```javascript\nconst data = await fetch('/api').then((res) => res.json());\n```\n\n#### 2. **`Error.prototype.cause`（ES2022）**\n\n-   链式错误堆栈追踪：\n\n```javascript\nthrow new Error('DB连接失败', { cause: originalError });\n```\n\n#### 3. **类成员自动初始化（ES2022）**\n\n-   直接在类中初始化字段：\n\n```javascript\nclass User {\n    role = 'guest'; // 无需构造函数\n}\n```\n\n---\n\n### 五、**兼容性与使用建议**\n\n1. **浏览器支持**：Chrome、Firefox、Safari 最新版已支持 ES2023。\n2. **Node.js**：18.x+ 支持大部分新特性（启用 `--harmony` 标志试用提案功能）。\n3. **旧环境适配**：通过 Babel 或 TypeScript 转译代码。\n\n---\n\n### 示例代码汇总\n\n```javascript\n// 最新数组方法\nconst users = [{ id: 1 }, { id: 2 }, { id: 1 }];\nconst lastUser = users.findLast((u) => u.id === 1); // {id: 1}\n\n// Temporal API\nconst now = Temporal.Now.instant().toString(); // \"2023-10-01T12:00:00Z\"\n\n// 错误链\ntry {\n    /* ... */\n} catch (err) {\n    throw new Error('处理失败', { cause: err });\n}\n```\n\n---\n\n掌握这些特性可以显著提升开发效率，建议根据项目需求逐步采用！\n\n### js怎么在服务端实现多线程\n\n在服务端（如 Node.js）中，JavaScript 可以通过 **Worker Threads** 模块实现多线程，用于处理 CPU 密集型任务，避免阻塞主线程。以下是具体实现方案：\n\n---\n\n### **一、使用 Node.js 的 `worker_threads` 模块**\n\n#### 1. **基础示例：创建子线程**\n\n```javascript\n// main.js（主线程）\nconst { Worker } = require('worker_threads');\n\nconst worker = new Worker('./worker.js', {\n    workerData: { input: 'Hello from main thread!' },\n});\n\nworker.on('message', (result) => {\n    console.log('主线程收到结果:', result);\n});\n\nworker.on('error', (err) => {\n    console.error('子线程报错:', err);\n});\n\nworker.on('exit', (code) => {\n    if (code !== 0) console.error(`子线程退出码: ${code}`);\n});\n```\n\n```javascript\n// worker.js（子线程）\nconst { parentPort, workerData } = require('worker_threads');\n\n// 执行 CPU 密集型任务（例如计算斐波那契数列）\nfunction heavyTask(input) {\n    // ...耗时计算...\n    return `${input} processed by worker`;\n}\n\nconst result = heavyTask(workerData.input);\nparentPort.postMessage(result);\n```\n\n#### 2. **共享内存（SharedArrayBuffer）**\n\n```javascript\n// 主线程\nconst sharedBuffer = new SharedArrayBuffer(4);\nconst arr = new Uint32Array(sharedBuffer);\narr[0] = 42;\n\nconst worker = new Worker('./worker.js', {\n    workerData: { buffer: sharedBuffer },\n});\n```\n\n```javascript\n// 子线程\nconst { workerData } = require('worker_threads');\nconst arr = new Uint32Array(workerData.buffer);\nconsole.log('子线程读取共享内存:', arr[0]); // 42\n```\n\n---\n\n### **三、适用场景与限制**\n\n#### 1. **适用场景**\n\n-   **CPU 密集型任务**：如数学计算、图像处理、加密解密。\n-   **大数据处理**：如 CSV/JSON 解析、日志分析。\n-   **并行计算**：如机器学习推理、物理模拟。\n\n#### 2. **不适用场景**\n\n-   **I/O 密集型任务**：应使用主线程的异步 I/O（如 `fs.promises`、数据库驱动）。\n-   **简单任务**：线程通信开销可能抵消性能收益。\n\n---\n\n### **四、对比其他多线程方案**\n\n| 方案               | 特点                                                          |\n| ------------------ | ------------------------------------------------------------- |\n| **Worker Threads** | 轻量级线程，共享进程内存，适合 CPU 密集型任务                 |\n| **Child Process**  | 独立进程，内存隔离，适合隔离高风险代码（如第三方插件）        |\n| **Cluster**        | 多进程负载均衡，适合 HTTP 服务器横向扩展（如 `pm2` 集群模式） |\n\n---\n\n### **五、实战示例：并行处理图像**\n\n```javascript\n// main.js\nconst { Worker } = require('worker_threads');\nconst images = [img1Buffer, img2Buffer, img3Buffer];\n\nimages.forEach((imgBuffer, index) => {\n    const worker = new Worker('./image-worker.js', {\n        workerData: { buffer: imgBuffer, index },\n    });\n    worker.on('message', (processed) => {\n        fs.writeFileSync(`output-${index}.jpg`, processed);\n    });\n});\n```\n\n```javascript\n// image-worker.js\nconst sharp = require('sharp');\nconst { parentPort, workerData } = require('worker_threads');\n\nsharp(workerData.buffer)\n    .resize(800, 600)\n    .toBuffer()\n    .then((data) => parentPort.postMessage(data));\n```\n\n### 一些特性怎么适配低版本浏览器\n\n适配新特性到低版本浏览器需通过 **代码转译（Transpiling）** 和 **Polyfill 填充** 实现，以下是具体方案和工具链：\n\n---\n\n### 一、**JavaScript 新特性适配**\n\n#### 1. **转译工具：Babel**\n\n-   **作用**：将 ES6+ 代码转换为 ES5 语法。\n-   **配置步骤**：\n    1.  安装依赖：\n    ```bash\n    npm install @babel/core @babel/preset-env babel-loader --save-dev\n    ```\n    2.  创建 `.babelrc` 文件：\n    ```json\n    {\n        \"presets\": [\n            [\n                \"@babel/preset-env\",\n                {\n                    \"targets\": \"> 0.25%, not dead\" // 根据需求调整目标浏览器\n                }\n            ]\n        ]\n    }\n    ```\n    3.  集成到 Webpack：\n    ```javascript\n    // webpack.config.js\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                exclude: /node_modules/,\n                use: 'babel-loader',\n            },\n        ];\n    }\n    ```\n\n#### 2. **Polyfill**\n\n-   **作用**：模拟缺失的 API（如 `Promise`、`Array.prototype.includes`）。\n-   **方案选择**：\n    -   **`core-js` + `regenerator-runtime`**（完整版）：\n        ```bash\n        npm install core-js regenerator-runtime\n        ```\n        ```javascript\n        // 入口文件顶部引入\n        import 'core-js/stable';\n        import 'regenerator-runtime/runtime';\n        ```\n    -   **按需引入**（减少体积）：\n        ```javascript\n        // 通过 @babel/preset-env 配置\n        // .babelrc\n        \"useBuiltIns\": \"usage\", // 自动按需引入 polyfill\n        \"corejs\": 3\n        ```\n\n---\n\n### 二、**CSS 新特性适配**\n\n#### 1. **PostCSS + Autoprefixer**\n\n-   **作用**：自动添加浏览器前缀（如 `-webkit-`、`-moz-`）。\n-   **配置步骤**：\n    1.  安装依赖：\n    ```bash\n    npm install  autoprefixer --save-dev\n    ```\n    2.  配置 autoprefixer：\n    ```javascript\n    module.exports = {\n        plugins: [require('autoprefixer')],\n    };\n    ```\n\n#### 2. **CSS 变量兼容**\n\n-   在 CSS 变量声明下方添加传统静态值，低版本浏览器会自动忽略变量语法，直接使用静态值\n```css\n.element {\n  color: #ff0000; /* 低版本浏览器的回退值 */\n  color: var(--primary-color, #ff0000); /* 支持变量的浏览器优先使用变量 */\n}\n```\n\n- 通过 JS 检测浏览器是否支持 CSS 变量，动态生成兼容样式。\n\n```js\n// 检测浏览器是否支持 CSS 变量\nconst isSupportCSSVars = () => {\n  try {\n    return CSS.supports('color', 'var(--fake-var)');\n  } catch (e) {\n    return false;\n  }\n};\n\n// 动态加载回退样式\nif (!isSupportCSSVars()) {\n  const style = document.createElement('style');\n  style.textContent = `\n    .element { color: #ff0000; }\n  `;\n  document.head.appendChild(style);\n}\n```\n\n\n- CSS 属性选择器 + 类名切换\n\n```css\n\n/* 默认主题 */\n.element { color: #ff0000; }\n\n/* 深色主题 */\n.theme-dark .element { color: #ffffff; }\n```\n\n### 六、**测试与调试**\n\n1. **本地测试**：  \n   使用 `browser-sync` 或 `serve` 启动本地服务，搭配旧版浏览器测试。\n2. **云测试平台**：\n    - [BrowserStack](https://www.browserstack.com/)\n    - [Sauce Labs](https://saucelabs.com/)\n3. **DevTools 模拟**：  \n   在 Chrome DevTools 中设置 **CPU throttling** 和 **Network throttling** 模拟低端设备。\n\n---\n\n### 七、**兼容性检查工具**\n\n1. [Can I Use](https://caniuse.com/)：查询特性支持情况。\n2. [ES-Check](https://github.com/dollarshaveclub/es-check)：检测 ES 版本兼容性。\n3. [Modernizr](https://modernizr.com/)：特性检测库。\n\n---\n\n### 总结\n\n通过 **Babel 转译 + Polyfill 按需引入 + PostCSS 处理 CSS** 的组合，可高效适配低版本浏览器。关键在于合理配置目标浏览器范围（`.browserslistrc`）和优化构建流程，平衡兼容性与代码体积。\n"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,