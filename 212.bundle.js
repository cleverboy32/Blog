"use strict";(self.webpackChunkreact_wyz=self.webpackChunkreact_wyz||[]).push([[212],{5212:(n,e,t)=>{t.r(e),t.d(e,{default:()=>o});const o="vue 是一个 js 框架，它实现了自己的模板，通过 .vue 文件可以经过编译成一个数据改变驱动视图改变的 js代码。\n那么这其中又是经历了什么样的步骤呢？\n\n----- \n一个 vue 对象是通过 new Vue({options}) 来得到的，也就是构造函数了。我们来看这个函数\n```\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n\n// 这里是一系列对这个函数进行的继承\ninitMixin(Vue)\nstateMixin(Vue)\neventsMixin(Vue)\nlifecycleMixin(Vue)\nrenderMixin(Vue)\n\nexport default Vue\n```\n可以看到这个 Vue 构造函数，它经历了 5 个系列的mixin，并在新创建时会运行 _init(options) 方法。\n那么我们来看看, 这五个 mixin 分别做了啥。\n\n ##### 第一个  initMixin\n 它只做了一件事， 定义了 _init 方法，那么你就知道创造一个Vue 实例，它执行的 _init 方法就是上面这个方法了。\n```\nVue.prototype._init = function (options?: Object) {\n....\n}\n```\n\n\n\n##### 第二个 stateMixin \n```\n  Object.defineProperty(Vue.prototype, '$data', dataDef)  // 能够返回 data\n  Object.defineProperty(Vue.prototype, '$props', propsDef) // 能够返回 props\n  Vue.prototype.$set = set // 就是我们用的 this.$set(this.people, 'name', ‘clever')方法, 下同。\n  Vue.prototype.$delete = del\n  Vue.prototype.$watch = function (\n   ....\n  }\n  ```\n\n##### 第三个 eventsMixin\n```\nVue.prototype.$on = function (eventname, fn) {\n....\n}\nVue.prototype._$once = function (eventname, fn) {\n // 监听一个自定义事件，但是只触发一次，在第一次触发之后移除监听器。\n}\nVue.prototype._off = function (event, fn) {\n// 移除自定义事件监听器。\n}\nVue.prototype.$emit = function (event) {\n// 触发一个事件\n}\n```\n##### 第四个 lifecycleMixin![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/0227c8c15285fbd179573e7cd8cb4718.png)\n##### 第五个 renderMixin![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/715399a9ac35cef7c3aca2d3242ca5a3.png)\n---\n\n好， 这个 Vue 继承了这些方法，它已经是一个完整的 Vue 了，而新创建的时候要执行 _init 方法了, 现在我们来看看这个方法里面做了写啥\n-  vm._uid = uid++ 创建 uid\n-  合并 options\n-   initLifecycle\n    initEvents(vm)\n    initRender(vm)\n    callHook(vm, 'beforeCreate')\n    initInjections(vm) // resolve injections before data/props\n    initState(vm)\n    initProvide(vm) // resolve provide after data/props\n    callHook(vm, 'created')\n```\n关于 initLifecycle\n  vm.$parent = parent\n  vm.$root = parent ? parent.$root : vm\n  vm.$children = []\n  vm.$refs = {}\n  vm._watcher = null\n  vm._inactive = null\n  vm._directInactive = false\n  vm._isMounted = false\n  vm._isDestroyed = false\n  vm._isBeingDestroyed = false\n  ```\n\n-  initEvents\n```\n  vm._events = Object.create(null)\n  vm._hasHookEvent = false\n  // init parent attached events\n  const listeners = vm.$options._parentListeners\n  if (listeners) {\n    updateComponentListeners(vm, listeners)\n  }\n  就是判断父级是否有事件监听，然后给父级进行监听事件\n  ```\n- initRender\n```\n   vm._vnode = null  // the root of the child tree\n  vm._staticTrees = null  // v-once cached trees\n  const options = vm.$options\n  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n  const renderContext = parentVnode && parentVnode.context\n  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n  vm.$scopedSlots = emptyObject\n  // 实例绑定 createElement 方法，以便可以正常在内部渲染\n // 参数顺序   tag, data, children, normalizationType, alwaysNormalize\n  // 内部使用从模板编译而来的渲染函数\n  \n  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n  // 公共版本必须是 normalization 的渲染函数\n  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n\n  // $attrs & $listeners 应该被监听热更新\n  const parentData = parentVnode && parentVnode.data\n\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n      !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n    }, true)\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {\n      !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n    }, true)\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)\n  }\n  ```\n-  callHook(vm, 'beforeCreate') 执行 beforeCreate 函数\n\n-  initInjections(vm) 收集注入的依赖\n```\n  const result = resolveInject(vm.$options.inject, vm)\n  if (result) {\n    toggleObserving(false)\n    Object.keys(result).forEach(key => {\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive(vm, key, result[key], () => {\n          warn(\n          \t`避免直接改变注入的值，因为将会重新渲染所提供这个值的组件, \n          \t改变的值是: \"${key}\",\n            vm\n          )\n        })\n      } else {\n        defineReactive(vm, key, result[key])\n      }\n    })\n    toggleObserving(true)\n```\n- initState 监听值收集依赖\n```\n  vm._watchers = []\n  const opts = vm.$options\n  if (opts.props) initProps(vm, opts.props) // 赋值 props 数据并收集依赖\n  if (opts.methods) initMethods(vm, opts.methods) // 赋值 vue 的各个 method\n  if (opts.data) {\n    initData(vm) // 收集依赖\n  } else {\n    observe(vm._data = {}, true /* asRootData */)\n  }\n  if (opts.computed) initComputed(vm, opts.computed) // 收集依赖\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch) // 初始化你写的监听对象\n  }\n \n```\n- initProvide\n```\n  const provide = vm.$options.provide\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide\n  }\n```\n-  callHook(vm, 'created') 执行 created 函数\n\n>这就是 _init 中各个函数所做的了。 我们可以看到总结过来就是\n1.初始化了生命状态\n2.进行事件上的监听\n3.渲染视图的初始化；收集所用到的父组件的数据或事件\n4.调用你写的 beforeCreate 方法\n5.initState, 处理了 vue 中的各种数据(props/data/methods.....), 也在这一步针对这些数据进行了依赖收集，数据更新绑定\n6.初始化了 provide 的值， 也可以看出它没有被收集依赖， 是不会影响视图改变的\n7.调用了你写的 created 方法了。\n\n以上，就是你 let app = new Vue() 这一步所发生的所有事情了。\n\n\n那通过平时的使用我们知道，我们是通过调用 $mounted 能把它挂载上页面。所以接下来我们就可以来看看 vue 自己的 $mount 都做了些什么?\n\n答: 就是把 template 或直接写的 render 函数，进行指令、事件等vue 中的语法解析编译成一个 AST 树。通过这个树，通过之前 initRender 中的 $createElement 方法可以生成虚拟DOM, 然后添加到页面中出，不就渲染出来了么。 如果大家使用过 Vue 的 $createElement 方法，相信就知道这个 ast 是怎么一个结构了，拿示例的来说\n```\ncreateElement(\n  'div',\n  [\n    '先写一些文字',\n    createElement('h1', '一则头条'),\n    createElement(MyComponent, {\n      props: {\n        someProp: 'foobar'\n      }\n    })\n  ]\n)\n```\n\n---\n说完了整个过程，现在还比较疑惑的就是它的收集依赖，然后数据改变引起的视图改变到底怎么做呢？\n\n也就是说我们要实现一个模式，vm 可能 data 对象中的一个值，比如 name 改变了，然后就调用重新渲染的函数，这里为了性能，是生成了一个虚拟 Dom, 然后比较哪里改变了进行相应的替换。 \n把这个模式抽象出来，就是我们需要一个 \n\n先说具体实现： 我们视图更新依赖到的值收集起来，这里把每一个依赖到的值称作 dep。每个依赖订阅与它有关的 vue 的 watcher 中心， 这里把 dep 所订阅的 watcher 叫做 sub。 那么 dep 被改变的时候，获取它订阅了那些 watcher， 通知他们进行 update 视图啦。\n\n可以看我画的简图\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/417c23088cb0224c6a4464651452c604.png)\n![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/59c0e76f684052df524761ee8f4f6942.png)\n\n这就是依赖对象 和 一个 watcher 对象所涉及到的处理了。\nVue 中又是怎么把一个个的属性，进行操作变成依赖的呢？\n对应它的源码就是 defineReactive 方法。源码如图：\n```\nexport function defineReactive (obj, key, val, customSetter, shallow) {\n  const dep = new Dep()\n  \n  // 迎合预定义的getter / setter\n  const getter = property && property.get\n  const setter = property && property.set\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key]\n  }\n  \n  let childOb = !shallow && observe(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify()\n    }\n  })\n}\n```\n这里就是用的 Object.defineProperty 方法，它可以重写对象的属性的 get 和 set 方法。 当这个属性在 Vue 中被获取的时候，就开始收集依赖，把它收集在这个 vm 的 watcher 中心，并且让它订阅这个 watcher 。当这个属性被重新设置时， 就通知它所订阅的对象去更新。\n\n大致要知道的就是这些了。关于具体是怎么实现把 template  编译成 ast 树， 具体是怎么把事件绑定上去的，你可以尽情的去猜想和推测，或者去看看具体的实现方式。但是 VUE 框架总体来说所做的就是这些事情了, 如果有觉得本文写的不清楚的地方可以提哈 = =\n"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,