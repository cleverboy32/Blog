"use strict";(self.webpackChunkcboy_blog=self.webpackChunkcboy_blog||[]).push([[551],{551:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});var r=t(358);const o={class:"component-typescript"},p={};var s=(0,t(389).A)(p,[["render",function(e,n){return(0,r.uX)(),(0,r.CE)("div",o,n[0]||(n[0]=[(0,r.Fv)('<h2>learn typescript</h2><h3>类型</h3><p>基本类型:</p><pre><code>string number bool \n</code></pre><p>数组 <code>[]</code>:</p><pre><code>string[]  number[]\n</code></pre><p>元祖:</p><pre><code>[string, number]. 数组中有不同的数据类型\n</code></pre><p>对象:</p><pre><code>{ name: string; age: number }\n</code></pre><p>函数：</p><pre><code>(arg1: string, arg?: bool) =&gt; void\n</code></pre><p>Symbol:</p><pre><code>let symbol = Symbol(&quot;key&quot;); \n</code></pre><p>空：</p><pre><code>undefined   null\n</code></pre><p>任何类型：</p><pre><code>any\n</code></pre><p>不存在的值：</p><pre><code>never\n</code></pre><h3>如何定义类型</h3><p><code>type</code> 定义类型变量</p><pre><code>type Person = { name: string; age: number}\nts 使用 const person1：Person = { name: &#39;22&#39;, age: 1};\n</code></pre><p><code>Interfaces</code> 声明 <code>对象</code> 类型的一种方法</p><pre><code>Interface Person { name: string; age: number}\n</code></pre><p><code>extends</code> 类型继承于声明的类型</p><pre><code>interface a { name: string}\ninterface b extends a {\n\tage: number\n}\nb 的类型等于 { name: string; age: number }\n</code></pre><p>in 判断属性是哪个类型中的</p><pre><code>type PersonListQuery = { user_ids: string[] }\ntype DogListQuery = { dog_ids: string[] }\n\nfunction getList(query: PersonListQuery | DogListQuery ) {\n\tif (&#39;user_ids&#39; in PersonListQuery) {\n\t \t// 这里可以推导出 query 类型是 PersonListQuery\n\t}\n}\n\n</code></pre><h3>类型组合</h3><p><code>Required&lt;T&gt;</code> 将 T 中所有属性变成必选</p><pre><code>Required&lt;{ a?: bool} &gt; = { a: bool }\n</code></pre><p><code>Partial&lt;T&gt;</code> 将 T 中所有属性变成可选</p><pre><code>Partial&lt;{ a: bool }&gt; = { a?: bool }\n</code></pre><p><code>Readonly&lt;T&gt;</code> 将 T 中所有属性变成只读，后续 ts 会检测该类型不允许修改</p><pre><code>const person2: Readonly&lt;{name: string}&gt; = {name: &#39;22&#39;}\nperson2.name = &#39;33&#39; //error\n</code></pre><p><code>Omit&lt;T, keys&gt;</code> 删除某些属性</p><pre><code>interface Person {\n  name: string;\n  age: number;\n}\n \ntype Name = Omit&lt;Person, &#39;age&#39;&gt;;\nName 的类型定义为 { name: string }\n</code></pre><p><code>Pick&lt;T, keys&gt;</code> 选择类型中的某些属性</p><pre><code>interface Person {\n  name: string;\n  age: number;\n}\ntype Name = Pick&lt;Person, &#39;name&#39;&gt;;\nName 的类型定义为 { name: string }\n</code></pre><p><code>Exclude&lt;T, deleteT&gt;</code> 删除类型 T 中 deleteT 的类型， 相当于 Omit, 第二个值可以是 keys ，也可以是一个类型变量</p><pre><code>interface Person {\n  name: string;\n  age: number;\n}\ntype Age = { age: number }\ntype Name = Exclude&lt;Person, Age&gt;\nName 的类型定义为 { name: string }\n</code></pre><p><code>Extract&lt;T, U&gt;</code> 提取 T 继承于的 U 类型</p><pre><code>type Person = {  name: string ; age: number } \ntype PersonDetail = { pet: any; phone: number } \ntype Name = { name: string }\ntype Name = Extract&lt;Person | PersonDetail , Name&gt;\n 将提取出含有 name 的类型 Person\n</code></pre><p><code>Parameters&lt;function T&gt;</code> 获取函数类型的函数类型</p><pre><code>type getName = (perpson: Person) =&gt; string;\ntype queryType = Parameters&lt;getName&gt;;\nqueryType  的类型定义为 Person\n</code></pre><p><code>ReturnType&lt;function T&gt;</code> 获取函数类型的返回值类型</p><pre><code>type getName = (perpson: Person) =&gt; string;\ntype resType = ReturnType&lt;getName&gt;;\nvalueType 类型为 string\n</code></pre><p><code>Awaited&lt;Promise Type&gt;</code> 获取异步返回的值类型</p><pre><code>type getPerson = (id: string) =&gt; Promise&lt;Person&gt;\ntype resType = ReturnType&lt;getPerson&gt; // Promise&lt;Person&gt;\ntype valueType = Awaited&lt;resType&gt; // Person\n</code></pre><p><code>Record&lt;K extends keyof any, T&gt;</code> 定义对象的 key 键类型</p><pre><code>type Keys = &#39;name&#39; | &#39;age&#39; \ntype person = Record&lt;Keys, any&gt;\n// person 的属性只能为 name 和 age\n</code></pre><p><code>NonNullable&lt;T&gt;</code> 去除类型中定义的 null 和 undefined</p><pre><code>type PersonHobby = hobby: string | undefined;\ntype Hobby = NonNullable&lt;hobby&gt;\nHobby 类型为  string\n</code></pre><h3>类型操作</h3><p><code>typeof Object</code> 获得<code>对象</code>的类型</p><pre><code>const person1 = { name: &#39;22&#39;, age: 1}\ntype Person = typeof person1\nPerson 类型为 { name: string; age: number }\n</code></pre><p><code>keyof T</code> 获得类型中的属性</p><pre><code>type Person = { name: string; age: number }\ntype Key = keyof Person \nkey 的类型为 &#39;name&#39; | &#39;age&#39;\n</code></pre><p>通常我们可以通过 keyof 约束对象的传参， 如</p><pre><code>type Person = { name: string; age: number }\ntype Key = keyof Person;\ntype getPersonAtrribute = (person: Person, key: Key) =&gt; Person[Key];\n</code></pre><p>或者某些情况下我们想知道一个对象的属性值</p><pre><code>const workPerson = { \n\t&#39;1&#39;: { name: &#39;1&#39;, age: 1},\n\t&#39;2&#39;: { name: &#39;2&#39;, age: 2},\n}\ntype WorkPerson  = typeof workPerson;  // { &#39;1&#39;: {name: string; age: number }, &#39;2&#39;: {name: string; age: number }\ntype Key = keyof WorkPerson  // &#39;1&#39; | &#39;2&#39;\ntype Person = WorkPerson[Key]   // {name: string; age: number }\n</code></pre><p><code>|</code> 类型兼容</p><pre><code>type width = &#39;string&#39; | &#39;number&#39;;\n\n则 width 可以是 &#39;32px&#39; 也可以是 &#39;32&#39; 在 渲染时兼容两种类型\n</code></pre><h3>函数重载</h3><p>定义不同类型的输入，推到出不同类型的输出</p><pre><code>type PersonListQuery = { user_ids: string[] };\ntype DongListQuery = { dog_ids: string[] };\nfunction getList(request: PersonListQuery): Person[];\nfunction getList(request: DogListQuery): Dog[];\n\nfunction getList(query: PersonListQuery | DogListQuery) {\n  if (&#39;user_ids&#39; in query) {  \n    return [] as Person[];\n  } else {\n    return [] as Dog[];\n  }\n}\n\nconst a = getList({ personIds: [], region: &#39;us&#39;})\n此时 a 的类型将能推到出是 Person[]\n</code></pre><h3>泛型</h3><p>类型的传参。 用 T 标识，在实际运用时你传入什么类型，该类型就作为后续推导。</p><pre><code>async function request&lt;T&gt;(url: string): Promise&lt;T&gt; {\n  const res = await fetch(url)\n  return res.json();\n}\n\nconst res = await request&lt;Person&gt;(&#39;getPersonInfo?id=1&#39;); \n此时 ts 可以推导出 res 的类型是 Person\n</code></pre><h3>Infer 类型参数使用</h3><p>通过 Infer 一个类型为变量，定义出获取类型的方法</p><pre><code>type addResultType&lt;T&gt; = T extends { a: infer U, b: infer U } ?  U : never;\ntype numberAdd =  addResultType&lt;{ a: 1, b: 2 }&gt;     // 推到出结果类型为 number\ntype textAdd = addResultType&lt;{ a: &#39;hello&#39;, b: &#39;world&#39; }&gt;     // 推到出结果类型为 string\n</code></pre><h3>枚举 enum</h3><p>变量的值是约定的几个取值</p><pre><code>const enum PageType {\n  HOME = &#39;home&#39;,\n  VIDEO = &#39;video&#39;,\n}\n\nfunction getPageUrl(page: PageType) {\n  return {\n    [PageType.VIDEO]: &quot;/video&quot;,\n    [PageType.HOME]: &quot;/home&quot;,\n  }[page];\n}\n</code></pre><h2>tsconfig</h2><p>了解了 ts 对于类型的定义和各种规则后，我们则可以在编写 js 代码时利用并进行类型约束。于此同时，我们需要引入 typescript 库去获得这些 ts 能力。</p><h3>如何引入</h3><pre><code>npm install  typescript  \n// 不必再多说\n</code></pre><h3>命令</h3><p>typescript 包是有命令文件的，通常 ts 的运行则是通过 tsc 配合相关命令去执行的. 具体命令大家可以安装包之后通过 tsc -h 查看 <img src="https://i-blog.csdnimg.cn/blog_migrate/349ffc362f0d831a780d2d7f754893a1.png" alt="在这里插入图片描述"></p><h3>配置 <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">官网</a></h3><p>如果你看了 tsc 命令，你会发现它是有很多命令的，并且有的命令还伴随这相关参数。在工作文件夹中，我们则通过配置文件 <code>tsconfig.js </code> 去配置，保证在项目中的运用。 配置参数这里就不细讲了，还是看官方文档靠谱点。</p>',85)]))}]])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,